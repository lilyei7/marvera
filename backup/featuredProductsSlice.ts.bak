import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export interface FeaturedProduct {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  category: string;
  emoji: string;
  tag: string;
  tagColor: string;
  inStock: boolean;
  unit: string;
}

interface FeaturedProductsState {
  items: FeaturedProduct[];
  loading: boolean;
  error: string | null;
}

// Helper functions para categor√≠as y emojis
export const getEmojiForCategory = (category: string): string => {
  const categoryMap: Record<string, string> = {
    'pescados': 'üêü',
    'mariscos': 'ü¶ê',
    'moluscos': 'ü¶™',
    'crustaceos': 'ü¶Ä',
    'conservas': 'ü•´',
    'congelados': '‚ùÑÔ∏è',
    'frescos': 'üßä',
    'especiales': '‚≠ê',
    'temporada': 'üåä'
  };
  return categoryMap[category?.toLowerCase()] || 'üêü';
};

export const getImageIdForCategory = (category: string): string => {
  const imageMap: Record<string, string> = {
    'pescados': '1565299624946-3fb11f5e6747', // Salm√≥n fresco
    'mariscos': '1559181089-95d742d40ba5', // Camarones
    'moluscos': '1572276910090-ae8e0f12d46e', // Ostras
    'crustaceos': '1508533831510-a99a70f34b75', // Cangrejo
    'conservas': '1571091718767-18b5b1457add', // Conservas
    'congelados': '1560885405-8b6db0d97e3a', // Pescado congelado
    'frescos': '1553611892-7ba35ad6f0dd', // Pescados frescos
    'especiales': '1563201515-e2e9b4efabc0', // Surtido especial
    'temporada': '1586190877494-bb04adefb7fc'  // Pescados de temporada
  };
  return imageMap[category?.toLowerCase()] || '1553611892-7ba35ad6f0dd';
};

// Crear un arreglo de productos destacados de ejemplo (solo para fallback en caso de error)
const exampleFeaturedProducts: FeaturedProduct[] = [
  {
    id: "1",
    name: "Salm√≥n Azul Premium",
    description: "Salm√≥n fresco de Alaska, corte premium",
    price: 179.99,
    image: "/products/salmon.jpg",
    category: "pescados",
    emoji: "üêü",
    tag: "Premium",
    tagColor: "bg-amber-500",
    inStock: true,
    unit: "kg"
  },
  {
    id: "2",
    name: "Camarones Jumbo",
    description: "Camarones grandes ideales para parrilla",
    price: 249.99,
    image: "/products/camarones.jpg",
    category: "mariscos",
    emoji: "ü¶ê",
    tag: "Fresco",
    tagColor: "bg-green-500",
    inStock: true,
    unit: "kg"
  },
  {
    id: "3",
    name: "Filete de At√∫n",
    description: "At√∫n fresco cortado en filetes",
    price: 199.99,
    image: "/products/atun.jpg",
    category: "pescados",
    emoji: "üêü",
    tag: "Popular",
    tagColor: "bg-blue-500",
    inStock: true,
    unit: "kg"
  }
];

// Thunk para obtener productos destacados directamente de la base de datos
export const fetchFeaturedProducts = createAsyncThunk(
  'featuredProducts/fetchFeaturedProducts',
  async (_, { rejectWithValue }) => {
    try {
      // Conexi√≥n directa a la base de datos a trav√©s del endpoint de la API
      const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5173';
      
      // Log para debug
      console.log(`üîç Obteniendo productos destacados desde: ${API_BASE_URL}/api/products/featured`);
      
      const response = await fetch(`${API_BASE_URL}/api/products/featured`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        },
        signal: AbortSignal.timeout(10000) // 10 segundos timeout
      });
      
      if (!response.ok) {
        console.error(`‚ùå Error en la respuesta: ${response.status} - ${response.statusText}`);
        throw new Error(`Error: ${response.status} - ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('‚úÖ Datos recibidos de productos destacados:', data);
      
      // Make sure data is always an array and has all required properties
      let processedData = [];
      
      // Si data es un objeto con una propiedad products, usar data.products (com√∫n en APIs)
      const productsArray = data.products || data;
      
      if (Array.isArray(productsArray) && productsArray.length > 0) {
        console.log(`üìä Procesando ${productsArray.length} productos destacados`);
        processedData = productsArray.map(product => ({
          ...product,
          // Ensure all required properties exist
          id: product.id?.toString() || `temp-${Math.random().toString(36).substr(2, 9)}`,
          name: product.name || 'Producto sin nombre',
          description: product.description || 'Sin descripci√≥n disponible',
          price: typeof product.price === 'number' ? product.price : 0,
          image: product.image || '',
          category: product.category || product.categoryName || 'mariscos',
          emoji: product.emoji || getEmojiForCategory(product.category || product.categoryName || 'mariscos'),
          tag: product.tag || 'Destacado',
          tagColor: product.tagColor || 'bg-primary',
          inStock: typeof product.inStock === 'boolean' ? product.inStock : product.stock > 0,
          unit: product.unit || 'kg'
        }));
      } else {
        console.warn('‚ö†Ô∏è No se encontraron productos destacados o el formato es incorrecto', data);
      }
      }
      
      // Pre-cargar im√°genes para mejorar UX
      if (processedData.length > 0) {
        const imagePromises = processedData.map((product: FeaturedProduct) => {
          return new Promise((resolve) => {
            if (product.image) {
              const img = new Image();
              img.onload = () => resolve(product);
              img.onerror = () => resolve(product); // Continuar aunque falle
              img.src = product.image;
            } else {
              resolve(product);
            }
          });
        });
        
        // Esperar a que todas las im√°genes se intenten cargar
        await Promise.all(imagePromises);
      }
      
      return processedData;
    } catch (error) {
      console.error('Error al cargar productos destacados:', error);
      return rejectWithValue('Error al cargar productos destacados');
    }
  }
);

const initialState: FeaturedProductsState = {
  items: [],
  loading: false,
  error: null,
};

const featuredProductsSlice = createSlice({
  name: 'featuredProducts',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchFeaturedProducts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchFeaturedProducts.fulfilled, (state, action) => {
        state.loading = false;
        // Ensure action.payload is always an array
        state.items = Array.isArray(action.payload) ? action.payload : [];
        state.error = null;
      })
      .addCase(fetchFeaturedProducts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Error al cargar productos destacados';
        // No usar datos de ejemplo como fallback, dejamos el estado vac√≠o
        state.items = [];
      });
  },
});

export default featuredProductsSlice.reducer;
